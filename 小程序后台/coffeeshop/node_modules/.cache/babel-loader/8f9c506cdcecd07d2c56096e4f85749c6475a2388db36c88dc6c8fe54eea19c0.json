{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from 'axios';\nimport CONFIG from '@/path/to/CONFIG'; // 请根据实际路径修改\n\n// 假设这些方法需要从 goods.vue 迁移过来\nconst getAccessToken = async function () {\n  // 这里需要实现获取 accessToken 的逻辑\n};\nexport default {\n  name: 'categoriesList',\n  data() {\n    return {\n      queryParam: {\n        good: '',\n        name: '',\n        price: '',\n        category: '',\n        image: ''\n      },\n      dialogVisible: false,\n      editForm: {},\n      goodsData: [],\n      total: 0\n    };\n  },\n  methods: {\n    // 将数据上传到微信云数据库\n    async handleUpload() {\n      try {\n        const accessToken = await getAccessToken();\n        const dataToUpload = {\n          good: this.queryParam.good,\n          name: this.queryParam.name,\n          price: this.queryParam.price,\n          category: this.queryParam.category,\n          image: this.queryParam.image\n        };\n        // 由于 response 变量声明后未使用，直接执行请求，不保存响应结果\n        await axios.post(`/wechat-api/tcb/databaseadd?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: `db.collection('goods').add({ data: ${JSON.stringify(dataToUpload)} })`\n        });\n        this.$message.success('商品信息上传成功');\n      } catch (error) {\n        console.error('商品信息上传失败:', error);\n        this.$message.error('商品信息上传失败，请重试');\n      }\n    },\n    // 编辑商品信息\n    async submitEdit() {\n      try {\n        const accessToken = await getAccessToken();\n        const dataToUpdate = {\n          good: this.editForm.good,\n          name: this.editForm.name,\n          price: this.editForm.price,\n          category: this.editForm.category,\n          image: this.editForm.image\n        };\n        await axios.post(`/wechat-api/tcb/databaseupdate?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: `db.collection('goods').doc('${this.editForm._id}').update({ data: ${JSON.stringify(dataToUpdate)} })`\n        });\n        this.$message.success('商品信息编辑成功');\n        this.dialogVisible = false;\n        this.queryCloudDatabase();\n      } catch (error) {\n        console.error('商品信息编辑失败:', error);\n        this.$message.error('商品信息编辑失败，请重试');\n      }\n    },\n    // 删除商品信息\n    async handleDelete(id) {\n      try {\n        const accessToken = await getAccessToken();\n        await axios.post(`/wechat-api/tcb/databasedelete?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: `db.collection('goods').doc('${id}').remove()`\n        });\n        this.$message.success('商品信息删除成功');\n        this.queryCloudDatabase();\n      } catch (error) {\n        console.error('商品信息删除失败:', error);\n        this.$message.error('商品信息删除失败，请重试');\n      }\n    },\n    // 查询云数据库\n    async queryCloudDatabase() {\n      try {\n        const accessToken = await getAccessToken();\n        const query = {\n          env: CONFIG.env,\n          query: `db.collection('goods').skip(${(this.queryParam.page - 1) * this.queryParam.limit}).limit(${this.queryParam.limit}).get()`,\n          totalQuery: \"db.collection('goods').count()\"\n        };\n        const [dataRes, countRes] = await Promise.all([axios.post(`/wechat-api/tcb/databasequery?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: query.query\n        }), axios.post(`/wechat-api/tcb/databasecount?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: query.totalQuery\n        })]);\n        const newData = dataRes.data.data.map(item => JSON.parse(item));\n        if (JSON.stringify(newData) !== JSON.stringify(this.goodsData)) {\n          this.goodsData = newData;\n          this.total = countRes.data.count;\n        }\n        return dataRes.data;\n      } catch (error) {\n        console.error('查询云数据库失败:', error);\n        throw error;\n      }\n    },\n    handleSizeChange(newSize) {\n      this.queryParam.limit = newSize;\n      this.queryCloudDatabase();\n    },\n    handlePageChange(newPage) {\n      this.queryParam.page = newPage;\n      this.queryCloudDatabase();\n    }\n  },\n  mounted() {\n    this.queryCloudDatabase();\n  }\n};","map":{"version":3,"names":["axios","CONFIG","getAccessToken","name","data","queryParam","good","price","category","image","dialogVisible","editForm","goodsData","total","methods","handleUpload","accessToken","dataToUpload","post","env","query","JSON","stringify","$message","success","error","console","submitEdit","dataToUpdate","_id","queryCloudDatabase","handleDelete","id","page","limit","totalQuery","dataRes","countRes","Promise","all","newData","map","item","parse","count","handleSizeChange","newSize","handlePageChange","newPage","mounted"],"sources":["C:\\Users\\Administrator\\Desktop\\小程序后台\\coffeeshop\\src\\components\\order\\categories.vue"],"sourcesContent":["<template>\r\n    <div id=\"container\">\r\n        categoriesList\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport CONFIG from '@/path/to/CONFIG'; // 请根据实际路径修改\r\n\r\n// 假设这些方法需要从 goods.vue 迁移过来\r\nconst getAccessToken = async function () {\r\n    // 这里需要实现获取 accessToken 的逻辑\r\n};\r\n\r\nexport default {\r\n    name: 'categoriesList',\r\n    data() {\r\n        return {\r\n            queryParam: {\r\n                good: '',\r\n                name: '',\r\n                price: '',\r\n                category: '',\r\n                image: ''\r\n            },\r\n            dialogVisible: false,\r\n            editForm: {},\r\n            goodsData: [],\r\n            total: 0\r\n        }\r\n    },\r\n    methods: {\r\n        // 将数据上传到微信云数据库\r\n        async handleUpload() {\r\n            try {\r\n                const accessToken = await getAccessToken();\r\n                const dataToUpload = {\r\n                    good: this.queryParam.good,\r\n                    name: this.queryParam.name,\r\n                    price: this.queryParam.price,\r\n                    category: this.queryParam.category,\r\n                    image: this.queryParam.image\r\n                };\r\n                // 由于 response 变量声明后未使用，直接执行请求，不保存响应结果\r\n                await axios.post(\r\n                    `/wechat-api/tcb/databaseadd?access_token=${accessToken}`,\r\n                    {\r\n                        env: CONFIG.env,\r\n                        query: `db.collection('goods').add({ data: ${JSON.stringify(dataToUpload)} })`\r\n                    }\r\n                );\r\n                this.$message.success('商品信息上传成功');\r\n            } catch (error) {\r\n                console.error('商品信息上传失败:', error);\r\n                this.$message.error('商品信息上传失败，请重试');\r\n            }\r\n        },\r\n        // 编辑商品信息\r\n        async submitEdit() {\r\n            try {\r\n                const accessToken = await getAccessToken();\r\n                const dataToUpdate = {\r\n                    good: this.editForm.good,\r\n                    name: this.editForm.name,\r\n                    price: this.editForm.price,\r\n                    category: this.editForm.category,\r\n                    image: this.editForm.image\r\n                };\r\n                await axios.post(\r\n                    `/wechat-api/tcb/databaseupdate?access_token=${accessToken}`,\r\n                    {\r\n                        env: CONFIG.env,\r\n                        query: `db.collection('goods').doc('${this.editForm._id}').update({ data: ${JSON.stringify(dataToUpdate)} })`\r\n                    }\r\n                );\r\n                this.$message.success('商品信息编辑成功');\r\n                this.dialogVisible = false;\r\n                this.queryCloudDatabase();\r\n            } catch (error) {\r\n                console.error('商品信息编辑失败:', error);\r\n                this.$message.error('商品信息编辑失败，请重试');\r\n            }\r\n        },\r\n        // 删除商品信息\r\n        async handleDelete(id) {\r\n            try {\r\n                const accessToken = await getAccessToken();\r\n                await axios.post(\r\n                    `/wechat-api/tcb/databasedelete?access_token=${accessToken}`,\r\n                    {\r\n                        env: CONFIG.env,\r\n                        query: `db.collection('goods').doc('${id}').remove()`\r\n                    }\r\n                );\r\n                this.$message.success('商品信息删除成功');\r\n                this.queryCloudDatabase();\r\n            } catch (error) {\r\n                console.error('商品信息删除失败:', error);\r\n                this.$message.error('商品信息删除失败，请重试');\r\n            }\r\n        },\r\n        // 查询云数据库\r\n        async queryCloudDatabase() {\r\n            try {\r\n                const accessToken = await getAccessToken();\r\n                const query = {\r\n                    env: CONFIG.env,\r\n                    query: `db.collection('goods').skip(${(this.queryParam.page - 1) * this.queryParam.limit}).limit(${this.queryParam.limit}).get()`,\r\n                    totalQuery: \"db.collection('goods').count()\"\r\n                };\r\n                const [dataRes, countRes] = await Promise.all([\r\n                    axios.post(`/wechat-api/tcb/databasequery?access_token=${accessToken}`, { env: CONFIG.env, query: query.query }),\r\n                    axios.post(`/wechat-api/tcb/databasecount?access_token=${accessToken}`, { env: CONFIG.env, query: query.totalQuery })\r\n                ]);\r\n                const newData = dataRes.data.data.map(item => JSON.parse(item));\r\n                if (JSON.stringify(newData) !== JSON.stringify(this.goodsData)) {\r\n                    this.goodsData = newData;\r\n                    this.total = countRes.data.count;\r\n                }\r\n                return dataRes.data;\r\n            } catch (error) {\r\n                console.error('查询云数据库失败:', error);\r\n                throw error;\r\n            }\r\n        },\r\n        handleSizeChange(newSize) {\r\n            this.queryParam.limit = newSize;\r\n            this.queryCloudDatabase();\r\n        },\r\n        handlePageChange(newPage) {\r\n            this.queryParam.page = newPage;\r\n            this.queryCloudDatabase();\r\n        }\r\n    },\r\n    mounted() {\r\n        this.queryCloudDatabase();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n</script>\r\n<style scoped></style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}