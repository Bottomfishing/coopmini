{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, \" lunbotu \");\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\Administrator\\Desktop\\小程序后台\\coffeeshop\\src\\components\\set\\lunbotu.vue"],"sourcesContent":["<template>\r\n    <div id=\"container\">\r\n        lunbotu\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nconst axios = require('axios');\r\nconst CONFIG = {\r\n    appId: 'wx6872b1e938e23c07',\r\n    appSecret: 'bb0342f524bf2fe87416defe5797f40a',\r\n    env: 'cloud1-6gzxjy5k59c1f367'\r\n};\r\nexport default {\r\n    name: 'lunBotu',\r\n    data() {\r\n        return {\r\n        };\r\n    },\r\n    methods: {\r\n        // 将数据上传到微信云数据库\r\n        async handleUpload() {\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                const dataToUpload = {\r\n                    good: this.queryParam.good,\r\n                    name: this.queryParam.name\r\n                };\r\n                await axios.post(\r\n                    `/wechat-api/tcb/databaseadd?access_token=${accessToken}`,\r\n                    {\r\n                        env: CONFIG.env,\r\n                        query: `db.collection('categories').add({ data: ${JSON.stringify(dataToUpload)} })`\r\n                    }\r\n                );\r\n                this.$message.success('分类数据上传成功');\r\n                this.queryCloudDatabase();\r\n            } catch (error) {\r\n                console.error('分类数据上传失败:', error);\r\n                this.$message.error('分类数据上传失败，请重试');\r\n            }\r\n        },\r\n\r\n        handleSizeChange(val) {\r\n            this.queryParam.limit = val;\r\n            this.queryCloudDatabase();\r\n        },\r\n\r\n        handlePageChange(val) {\r\n            this.queryParam.page = val;\r\n            this.queryCloudDatabase();\r\n        },\r\n\r\n        // 提交编辑信息\r\n        async submitEdit() {\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                const dataToUpdate = {\r\n                    good: this.editForm.good,\r\n                    name: this.editForm.name\r\n                };\r\n                await axios.post(\r\n                    `/wechat-api/tcb/databaseupdate?access_token=${accessToken}`,\r\n                    {\r\n                        env: CONFIG.env,\r\n                        query: `db.collection('categories').doc('${this.editForm._id}').update({ data: ${JSON.stringify(dataToUpdate)} })`\r\n                    }\r\n                );\r\n                this.$message.success('分类信息编辑成功');\r\n                this.dialogVisible = false;\r\n                this.queryCloudDatabase();\r\n            } catch (error) {\r\n                console.error('分类信息编辑失败:', error);\r\n                this.$message.error('分类信息编辑失败，请重试');\r\n            }\r\n        },\r\n\r\n        // 编辑分类信息\r\n        handleEdit(item) {\r\n            this.editForm = {\r\n                _id: item._id,\r\n                good: item.good,\r\n                name: item.name\r\n            };\r\n            this.dialogVisible = true;\r\n        },\r\n\r\n        // 删除分类信息\r\n        async handleDelete(id) {\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                await axios.post(\r\n                    `/wechat-api/tcb/databasedelete?access_token=${accessToken}`,\r\n                    {\r\n                        env: CONFIG.env,\r\n                        query: `db.collection('categories').doc('${id}').remove()`\r\n                    }\r\n                );\r\n                this.$message.success('分类删除成功');\r\n                this.queryCloudDatabase();\r\n            } catch (error) {\r\n                console.error('分类删除失败:', error);\r\n                this.$message.error('分类删除失败，请重试');\r\n            }\r\n        },\r\n\r\n        // 获取微信访问令牌\r\n        async getAccessToken() {\r\n            try {\r\n                const response = await axios.get('/cgi-bin/token', {\r\n                    params: {\r\n                        grant_type: 'client_credential',\r\n                        appid: CONFIG.appId,\r\n                        secret: CONFIG.appSecret\r\n                    }\r\n                });\r\n                return response.data.access_token;\r\n            } catch (error) {\r\n                console.error('获取访问令牌失败:', error);\r\n                throw error;\r\n            }\r\n        },\r\n\r\n\r\n        // 查询云数据库\r\n        async queryCloudDatabase() {\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                const query = {\r\n                    env: CONFIG.env,\r\n                    query: `db.collection('categories').skip(${(this.queryParam.page - 1) * this.queryParam.limit}).limit(${this.queryParam.limit}).get()`,\r\n                    totalQuery: \"db.collection('categories').count()\"\r\n                };\r\n                const [dataRes, countRes] = await Promise.all([\r\n                    axios.post(`/wechat-api/tcb/databasequery?access_token=${accessToken}`, { env: CONFIG.env, query: query.query }),\r\n                    axios.post(`/wechat-api/tcb/databasecount?access_token=${accessToken}`, { env: CONFIG.env, query: query.totalQuery })\r\n                ]);\r\n                const newData = dataRes.data.data ? dataRes.data.data.map(item => JSON.parse(item)) : [];\r\n                if (JSON.stringify(newData) !== JSON.stringify(this.goodsData)) {\r\n                    this.goodsData = newData;\r\n                    this.total = countRes.data.count;\r\n                }\r\n                return dataRes.data;\r\n            } catch (error) {\r\n                console.error('查询云数据库失败:', error);\r\n                throw error;\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        // 首次加载数据\r\n        this.queryCloudDatabase();\r\n        // 启动定时器（每~秒请求一次）\r\n        this.timer = setInterval(() => {\r\n            this.queryCloudDatabase().catch(() => { });\r\n        }, 10000);\r\n    },\r\n    beforeUnmount() {\r\n        // 组件卸载时清除定时器\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n            this.timer = null;\r\n        }\r\n    }\r\n\r\n}\r\n</script>\r\n<style scoped>\r\ntable {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n}\r\n\r\nth,\r\ntd {\r\n    border: 1px solid #ddd;\r\n    padding: 8px;\r\n    text-align: left;\r\n}\r\n\r\nth {\r\n    background-color: #f2f2f2;\r\n}\r\n</style>\r\n"],"mappings":";;EACSA,EAAE,EAAC;AAAW;;uBAAnBC,mBAAA,CAEM,OAFNC,UAEM,EAFc,WAEpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}