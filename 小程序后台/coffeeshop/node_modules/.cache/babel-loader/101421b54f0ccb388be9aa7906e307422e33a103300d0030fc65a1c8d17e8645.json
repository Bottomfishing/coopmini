{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nconst axios = require('axios');\nconst CONFIG = {\n  appId: 'wx6872b1e938e23c07',\n  appSecret: 'bb0342f524bf2fe87416defe5797f40a',\n  env: 'cloud1-6gzxjy5k59c1f367'\n};\nexport default {\n  name: 'goodsCategoriesList',\n  data() {\n    return {\n      dialogVisible: false,\n      editForm: {\n        good: '',\n        name: '',\n        _id: ''\n      },\n      goodsData: [],\n      queryParam: {\n        page: 1,\n        limit: 10,\n        good: '',\n        name: ''\n      },\n      total: 0,\n      timer: null\n    };\n  },\n  methods: {\n    // 将数据上传到微信云数据库\n    async handleUpload() {\n      try {\n        const accessToken = await this.getAccessToken();\n        const dataToUpload = {\n          good: this.queryParam.good,\n          name: this.queryParam.name\n        };\n        await axios.post(`/wechat-api/tcb/databaseadd?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: `db.collection('categories').add({ data: ${JSON.stringify(dataToUpload)} })`\n        });\n        this.$message.success('分类数据上传成功');\n        this.queryCloudDatabase();\n      } catch (error) {\n        console.error('分类数据上传失败:', error);\n        this.$message.error('分类数据上传失败，请重试');\n      }\n    },\n    handleSizeChange(val) {\n      this.queryParam.limit = val;\n      this.queryCloudDatabase();\n    },\n    handlePageChange(val) {\n      this.queryParam.page = val;\n      this.queryCloudDatabase();\n    },\n    // 提交编辑信息\n    async submitEdit() {\n      try {\n        const accessToken = await this.getAccessToken();\n        const dataToUpdate = {\n          good: this.editForm.good,\n          name: this.editForm.name\n        };\n        await axios.post(`/wechat-api/tcb/databaseupdate?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: `db.collection('categories').doc('${this.editForm._id}').update({ data: ${JSON.stringify(dataToUpdate)} })`\n        });\n        this.$message.success('分类信息编辑成功');\n        this.dialogVisible = false;\n        this.queryCloudDatabase();\n      } catch (error) {\n        console.error('分类信息编辑失败:', error);\n        this.$message.error('分类信息编辑失败，请重试');\n      }\n    },\n    // 编辑分类信息\n    handleEdit(item) {\n      this.editForm = {\n        _id: item._id,\n        good: item.good,\n        name: item.name\n      };\n      this.dialogVisible = true;\n    },\n    // 删除分类信息\n    async handleDelete(id) {\n      try {\n        const accessToken = await this.getAccessToken();\n        await axios.post(`/wechat-api/tcb/databasedelete?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: `db.collection('categories').doc('${id}').remove()`\n        });\n        this.$message.success('分类删除成功');\n        this.queryCloudDatabase();\n      } catch (error) {\n        console.error('分类删除失败:', error);\n        this.$message.error('分类删除失败，请重试');\n      }\n    },\n    // 获取微信访问令牌\n    async getAccessToken() {\n      try {\n        const response = await axios.get('/cgi-bin/token', {\n          params: {\n            grant_type: 'client_credential',\n            appid: CONFIG.appId,\n            secret: CONFIG.appSecret\n          }\n        });\n        return response.data.access_token;\n      } catch (error) {\n        console.error('获取访问令牌失败:', error);\n        throw error;\n      }\n    },\n    // 查询云数据库\n    async queryCloudDatabase() {\n      try {\n        const accessToken = await this.getAccessToken();\n        const query = {\n          env: CONFIG.env,\n          query: `db.collection('categories').skip(${(this.queryParam.page - 1) * this.queryParam.limit}).limit(${this.queryParam.limit}).get()`,\n          totalQuery: \"db.collection('categories').count()\"\n        };\n        const [dataRes, countRes] = await Promise.all([axios.post(`/wechat-api/tcb/databasequery?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: query.query\n        }), axios.post(`/wechat-api/tcb/databasecount?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: query.totalQuery\n        })]);\n        const newData = dataRes.data.data ? dataRes.data.data.map(item => JSON.parse(item)) : [];\n        if (JSON.stringify(newData) !== JSON.stringify(this.goodsData)) {\n          this.goodsData = newData;\n          this.total = countRes.data.count;\n        }\n        return dataRes.data;\n      } catch (error) {\n        console.error('查询云数据库失败:', error);\n        throw error;\n      }\n    }\n  },\n  mounted() {\n    // 首次加载数据\n    this.queryCloudDatabase();\n    // 启动定时器（每~秒请求一次）\n    this.timer = setInterval(() => {\n      this.queryCloudDatabase().catch(() => {});\n    }, 10000);\n  },\n  beforeUnmount() {\n    // 组件卸载时清除定时器\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n  }\n};","map":{"version":3,"names":["axios","require","CONFIG","appId","appSecret","env","name","data","dialogVisible","editForm","good","_id","goodsData","queryParam","page","limit","total","timer","methods","handleUpload","accessToken","getAccessToken","dataToUpload","post","query","JSON","stringify","$message","success","queryCloudDatabase","error","console","handleSizeChange","val","handlePageChange","submitEdit","dataToUpdate","handleEdit","item","handleDelete","id","response","get","params","grant_type","appid","secret","access_token","totalQuery","dataRes","countRes","Promise","all","newData","map","parse","count","mounted","setInterval","catch","beforeUnmount","clearInterval"],"sources":["C:\\Users\\Administrator\\Desktop\\小程序后台\\coffeeshop\\src\\components\\order\\categories.vue"],"sourcesContent":["<template>\r\n\r\n    <!-- 信息编辑模块 -->\r\n    <el-dialog v-model=\"dialogVisible\" title=\"编辑分类信息\">\r\n        <el-form :model=\"editForm\" label-width=\"120px\">\r\n            <el-form-item label=\"分类ID\">\r\n                <el-input v-model=\"editForm.good\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"分类名称\">\r\n                <el-input v-model=\"editForm.name\"></el-input>\r\n            </el-form-item>\r\n        </el-form>\r\n        <template #footer>\r\n            <span class=\"dialog-footer\">\r\n                <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n                <el-button type=\"primary\" @click=\"submitEdit\">确定</el-button>\r\n            </span>\r\n        </template>\r\n    </el-dialog>\r\n\r\n    <!-- 物品上传模块 -->\r\n    <div class=\"content-container\" style=\"padding-bottom: 0; margin-bottom: 0;\">\r\n        <div style=\"margin: 0 0 20px 10px;\">物品上传:</div>\r\n        <el-container class=\"content-row\">\r\n            <div class=\"input-tip\">\r\n                分类ID:\r\n            </div>\r\n            <div class=\"input-field\">\r\n                <el-input v-model=\"queryParam.good\"></el-input>\r\n            </div>\r\n            <div class=\"input-tip\">\r\n                分类名称:\r\n            </div>\r\n            <div class=\"input-field\">\r\n                <el-input v-model=\"queryParam.name\"></el-input>\r\n            </div>\r\n        </el-container>\r\n\r\n\r\n        <!-- 上传按钮 -->\r\n        <el-container class=\"content-row\">\r\n            <div class=\"input-tip\">\r\n            </div>\r\n            <div class=\"input-field\">\r\n                <el-button type=\"primary\" @click=\"handleUpload\">上传后台云数据</el-button>\r\n            </div>\r\n        </el-container>\r\n    </div>\r\n\r\n    <!-- 表格展示 -->\r\n    <div>\r\n        <table v-if=\"goodsData.length > 0\">\r\n            <thead>\r\n                <tr>\r\n                    <th>ID</th>\r\n                    <th>类别</th>\r\n                    <th>分类名称</th>\r\n                    <th>编辑/删除</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"(item, index) in goodsData\" :key=\"index\">\r\n                    <td>{{ item._id }}</td>\r\n                    <td>{{ item.good }}</td>\r\n                    <td>{{ item.name }}</td>\r\n                    <td>\r\n                        <div style=\"display: flex; flex-direction: column; gap: 8px;\">\r\n                            <el-button type=\"primary\" @click=\"handleEdit(item)\" style=\"width: 100px;\">编辑</el-button>\r\n                            <el-button type=\"danger\" @click=\"handleDelete(item._id)\"\r\n                                style=\"width: 100px; margin-left: 0px;\">删除</el-button>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <el-pagination background :page-sizes=\"[10, 20, 50]\" :current-page=\"queryParam.page\"\r\n            :page-size=\"queryParam.limit\" layout=\"total, sizes, prev, pager, next\" :total=\"total\"\r\n            @size-change=\"handleSizeChange\" @current-change=\"handlePageChange\" />\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\nconst axios = require('axios');\r\nconst CONFIG = {\r\n    appId: 'wx6872b1e938e23c07',\r\n    appSecret: 'bb0342f524bf2fe87416defe5797f40a',\r\n    env: 'cloud1-6gzxjy5k59c1f367'\r\n};\r\nexport default {\r\n    name: 'goodsCategoriesList',\r\n    data() {\r\n        return {\r\n            dialogVisible: false,\r\n            editForm: {\r\n                good: '',\r\n                name: '',\r\n                _id: ''\r\n            },\r\n            goodsData: [],\r\n            queryParam: {\r\n                page: 1,\r\n                limit: 10,\r\n                good: '',\r\n                name: ''\r\n            },\r\n            total: 0,\r\n            timer: null\r\n        };\r\n    },\r\n    methods: {\r\n        // 将数据上传到微信云数据库\r\n        async handleUpload() {\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                const dataToUpload = {\r\n                    good: this.queryParam.good,\r\n                    name: this.queryParam.name\r\n                };\r\n                await axios.post(\r\n                    `/wechat-api/tcb/databaseadd?access_token=${accessToken}`,\r\n                    {\r\n                        env: CONFIG.env,\r\n                        query: `db.collection('categories').add({ data: ${JSON.stringify(dataToUpload)} })`\r\n                    }\r\n                );\r\n                this.$message.success('分类数据上传成功');\r\n                this.queryCloudDatabase();\r\n            } catch (error) {\r\n                console.error('分类数据上传失败:', error);\r\n                this.$message.error('分类数据上传失败，请重试');\r\n            }\r\n        },\r\n\r\n        handleSizeChange(val) {\r\n            this.queryParam.limit = val;\r\n            this.queryCloudDatabase();\r\n        },\r\n\r\n        handlePageChange(val) {\r\n            this.queryParam.page = val;\r\n            this.queryCloudDatabase();\r\n        },\r\n\r\n        // 提交编辑信息\r\n        async submitEdit() {\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                const dataToUpdate = {\r\n                    good: this.editForm.good,\r\n                    name: this.editForm.name\r\n                };\r\n                await axios.post(\r\n                    `/wechat-api/tcb/databaseupdate?access_token=${accessToken}`,\r\n                    {\r\n                        env: CONFIG.env,\r\n                        query: `db.collection('categories').doc('${this.editForm._id}').update({ data: ${JSON.stringify(dataToUpdate)} })`\r\n                    }\r\n                );\r\n                this.$message.success('分类信息编辑成功');\r\n                this.dialogVisible = false;\r\n                this.queryCloudDatabase();\r\n            } catch (error) {\r\n                console.error('分类信息编辑失败:', error);\r\n                this.$message.error('分类信息编辑失败，请重试');\r\n            }\r\n        },\r\n\r\n        // 编辑分类信息\r\n        handleEdit(item) {\r\n            this.editForm = {\r\n                _id: item._id,\r\n                good: item.good,\r\n                name: item.name\r\n            };\r\n            this.dialogVisible = true;\r\n        },\r\n\r\n        // 删除分类信息\r\n        async handleDelete(id) {\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                await axios.post(\r\n                    `/wechat-api/tcb/databasedelete?access_token=${accessToken}`,\r\n                    {\r\n                        env: CONFIG.env,\r\n                        query: `db.collection('categories').doc('${id}').remove()`\r\n                    }\r\n                );\r\n                this.$message.success('分类删除成功');\r\n                this.queryCloudDatabase();\r\n            } catch (error) {\r\n                console.error('分类删除失败:', error);\r\n                this.$message.error('分类删除失败，请重试');\r\n            }\r\n        },\r\n\r\n        // 获取微信访问令牌\r\n        async getAccessToken() {\r\n            try {\r\n                const response = await axios.get('/cgi-bin/token', {\r\n                    params: {\r\n                        grant_type: 'client_credential',\r\n                        appid: CONFIG.appId,\r\n                        secret: CONFIG.appSecret\r\n                    }\r\n                });\r\n                return response.data.access_token;\r\n            } catch (error) {\r\n                console.error('获取访问令牌失败:', error);\r\n                throw error;\r\n            }\r\n        },\r\n\r\n\r\n        // 查询云数据库\r\n        async queryCloudDatabase() {\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                const query = {\r\n                    env: CONFIG.env,\r\n                    query: `db.collection('categories').skip(${(this.queryParam.page - 1) * this.queryParam.limit}).limit(${this.queryParam.limit}).get()`,\r\n                    totalQuery: \"db.collection('categories').count()\"\r\n                };\r\n                const [dataRes, countRes] = await Promise.all([\r\n                    axios.post(`/wechat-api/tcb/databasequery?access_token=${accessToken}`, { env: CONFIG.env, query: query.query }),\r\n                    axios.post(`/wechat-api/tcb/databasecount?access_token=${accessToken}`, { env: CONFIG.env, query: query.totalQuery })\r\n                ]);\r\n                const newData = dataRes.data.data ? dataRes.data.data.map(item => JSON.parse(item)) : [];\r\n                if (JSON.stringify(newData) !== JSON.stringify(this.goodsData)) {\r\n                    this.goodsData = newData;\r\n                    this.total = countRes.data.count;\r\n                }\r\n                return dataRes.data;\r\n            } catch (error) {\r\n                console.error('查询云数据库失败:', error);\r\n                throw error;\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        // 首次加载数据\r\n        this.queryCloudDatabase();\r\n        // 启动定时器（每~秒请求一次）\r\n        this.timer = setInterval(() => {\r\n            this.queryCloudDatabase().catch(() => { });\r\n        }, 10000);\r\n    },\r\n    beforeUnmount() {\r\n        // 组件卸载时清除定时器\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n            this.timer = null;\r\n        }\r\n    }\r\n\r\n}\r\n</script>\r\n<style scoped>\r\ntable {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n}\r\n\r\nth,\r\ntd {\r\n    border: 1px solid #ddd;\r\n    padding: 8px;\r\n    text-align: left;\r\n}\r\n\r\nth {\r\n    background-color: #f2f2f2;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}