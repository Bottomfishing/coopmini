{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nconst axios = require('axios');\nconst CONFIG = {\n  appId: 'wx6872b1e938e23c07',\n  appSecret: 'bb0342f524bf2fe87416defe5797f40a',\n  env: 'cloud1-6gzxjy5k59c1f367'\n};\nexport default {\n  name: 'goodsCategoriesList',\n  data() {\n    return {\n      editForm: {},\n      queryParam: {},\n      total: 0,\n      goodsData: [],\n      timer: null\n    };\n  },\n  methods: {\n    // 将数据上传到微信云数据库\n\n    // 获取微信访问令牌\n    async getAccessToken() {\n      try {\n        const response = await axios.get('/cgi-bin/token', {\n          params: {\n            grant_type: 'client_credential',\n            appid: CONFIG.appId,\n            secret: CONFIG.appSecret\n          }\n        });\n        return response.data.access_token;\n      } catch (error) {\n        console.error('获取访问令牌失败:', error);\n        throw error;\n      }\n    },\n    // 编辑商品信息并上传到云数据库\n    async handleEdit(item) {\n      this.editForm = {\n        _id: item._id,\n        good: item.good,\n        name: item.name,\n        price: item.price,\n        category: item.category,\n        image: item.image\n      };\n      this.dialogVisible = true;\n      try {\n        const accessToken = await this.getAccessToken();\n        const dataToUpdate = {\n          good: item.good,\n          name: item.name,\n          price: item.price,\n          category: item.category,\n          image: item.image\n        };\n        await axios.post(`/wechat-api/tcb/databaseupdate?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: `db.collection('goods').doc('${item._id}').update({ data: ${JSON.stringify(dataToUpdate)} })`\n        });\n        this.queryCloudDatabase();\n      } catch (error) {\n        console.error('商品信息编辑失败:', error);\n        this.$message.error('商品信息编辑失败，请重试');\n      }\n    },\n    // 查询云数据库\n    async queryCloudDatabase() {\n      try {\n        const accessToken = await this.getAccessToken();\n        const query = {\n          env: CONFIG.env,\n          query: `db.collection('goods').skip(${(this.queryParam.page - 1) * this.queryParam.limit}).limit(${this.queryParam.limit}).get()`,\n          totalQuery: \"db.collection('goods').count()\"\n        };\n        const response = await axios.post(`/wechat-api/tcb/databasequery?access_token=${accessToken}`, query);\n        const [dataRes, countRes] = await Promise.all([axios.post(`/wechat-api/tcb/databasequery?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: query.query\n        }), axios.post(`/wechat-api/tcb/databasecount?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: query.totalQuery\n        })]);\n        const newData = dataRes.data.data.map(item => JSON.parse(item));\n        if (JSON.stringify(newData) !== JSON.stringify(this.goodsData)) {\n          this.goodsData = newData;\n          this.total = countRes.data.count;\n        }\n        return response.data;\n      } catch (error) {\n        console.error('查询云数据库失败:', error);\n        throw error;\n      }\n    }\n  },\n  mounted() {\n    // 首次加载数据\n    this.queryCloudDatabase();\n    // 启动定时器（每5秒请求一次）\n    this.timer = setInterval(() => {\n      this.queryCloudDatabase().catch(() => {});\n    }, 10000);\n  },\n  beforeUnmount() {\n    // 组件卸载时清除定时器\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n  }\n};","map":{"version":3,"names":["axios","require","CONFIG","appId","appSecret","env","name","data","editForm","queryParam","total","goodsData","timer","methods","getAccessToken","response","get","params","grant_type","appid","secret","access_token","error","console","handleEdit","item","_id","good","price","category","image","dialogVisible","accessToken","dataToUpdate","post","query","JSON","stringify","queryCloudDatabase","$message","page","limit","totalQuery","dataRes","countRes","Promise","all","newData","map","parse","count","mounted","setInterval","catch","beforeUnmount","clearInterval"],"sources":["C:\\Users\\Administrator\\Desktop\\小程序后台\\coffeeshop\\src\\components\\order\\categories.vue"],"sourcesContent":["<template>\r\n    <div id=\"container\">\r\n        categoriesList\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\nconst axios = require('axios');\r\nconst CONFIG = {\r\n    appId: 'wx6872b1e938e23c07',\r\n    appSecret: 'bb0342f524bf2fe87416defe5797f40a',\r\n    env: 'cloud1-6gzxjy5k59c1f367'\r\n};\r\nexport default {\r\n    name: 'goodsCategoriesList',\r\n    data() {\r\n        return {\r\n            editForm: {\r\n            },\r\n            queryParam: {\r\n            },\r\n            total: 0,\r\n            goodsData: [],\r\n            timer: null,\r\n        };\r\n    },\r\n    methods: {\r\n        // 将数据上传到微信云数据库\r\n      \r\n        // 获取微信访问令牌\r\n        async getAccessToken() {\r\n            try {\r\n                const response = await axios.get('/cgi-bin/token', {\r\n                    params: {\r\n                        grant_type: 'client_credential',\r\n                        appid: CONFIG.appId,\r\n                        secret: CONFIG.appSecret\r\n                    }\r\n                });\r\n                return response.data.access_token;\r\n            } catch (error) {\r\n                console.error('获取访问令牌失败:', error);\r\n                throw error;\r\n            }\r\n        },\r\n\r\n\r\n    \r\n\r\n        // 编辑商品信息并上传到云数据库\r\n        async handleEdit(item) {\r\n            this.editForm = {\r\n                _id: item._id,\r\n                good: item.good,\r\n                name: item.name,\r\n                price: item.price,\r\n                category: item.category,\r\n                image: item.image\r\n            };\r\n            this.dialogVisible = true;\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                const dataToUpdate = {\r\n                    good: item.good,\r\n                    name: item.name,\r\n                    price: item.price,\r\n                    category: item.category,\r\n                    image: item.image\r\n                };\r\n                await axios.post(\r\n                    `/wechat-api/tcb/databaseupdate?access_token=${accessToken}`,\r\n                    {\r\n                        env: CONFIG.env,\r\n                        query: `db.collection('goods').doc('${item._id}').update({ data: ${JSON.stringify(dataToUpdate)} })`\r\n                    });\r\n                this.queryCloudDatabase();\r\n            } catch (error) {\r\n                console.error('商品信息编辑失败:', error);\r\n                this.$message.error('商品信息编辑失败，请重试');\r\n            }\r\n        },\r\n\r\n\r\n\r\n        // 查询云数据库\r\n        async queryCloudDatabase() {\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                const query = {\r\n                    env: CONFIG.env,\r\n                    query: `db.collection('goods').skip(${(this.queryParam.page - 1) * this.queryParam.limit}).limit(${this.queryParam.limit}).get()`,\r\n                    totalQuery: \"db.collection('goods').count()\"\r\n                };\r\n                const response = await axios.post(\r\n                    `/wechat-api/tcb/databasequery?access_token=${accessToken}`,\r\n                    query\r\n                );\r\n                const [dataRes, countRes] = await Promise.all([\r\n                    axios.post(`/wechat-api/tcb/databasequery?access_token=${accessToken}`, { env: CONFIG.env, query: query.query }),\r\n                    axios.post(`/wechat-api/tcb/databasecount?access_token=${accessToken}`, { env: CONFIG.env, query: query.totalQuery })\r\n                ]);\r\n                const newData = dataRes.data.data.map(item => JSON.parse(item));\r\n                if (JSON.stringify(newData) !== JSON.stringify(this.goodsData)) {\r\n                    this.goodsData = newData;\r\n                    this.total = countRes.data.count;\r\n                }\r\n                return response.data;\r\n            } catch (error) {\r\n                console.error('查询云数据库失败:', error);\r\n                throw error;\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        // 首次加载数据\r\n        this.queryCloudDatabase();\r\n        // 启动定时器（每5秒请求一次）\r\n        this.timer = setInterval(() => {\r\n            this.queryCloudDatabase().catch(() => { });\r\n        }, 10000);\r\n    },\r\n    beforeUnmount() {\r\n        // 组件卸载时清除定时器\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n            this.timer = null;\r\n        }\r\n    }\r\n\r\n}\r\n</script>\r\n<style scoped></style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}