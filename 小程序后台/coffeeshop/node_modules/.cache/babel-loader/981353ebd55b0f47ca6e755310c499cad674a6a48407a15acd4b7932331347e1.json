{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nconst axios = require('axios');\nconst CONFIG = {\n  appId: 'wx6872b1e938e23c07',\n  appSecret: 'bb0342f524bf2fe87416defe5797f40a',\n  env: 'cloud1-6gzxjy5k59c1f367'\n};\nexport default {\n  name: 'lunBotu',\n  data() {\n    return {};\n  },\n  methods: {\n    // 将数据上传到微信云数据库\n    async handleUpload() {\n      try {\n        const accessToken = await this.getAccessToken();\n        const dataToUpload = {\n          good: this.queryParam.good,\n          name: this.queryParam.name\n        };\n        await axios.post(`/wechat-api/tcb/databaseadd?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: `db.collection('categories').add({ data: ${JSON.stringify(dataToUpload)} })`\n        });\n        this.$message.success('分类数据上传成功');\n        this.queryCloudDatabase();\n      } catch (error) {\n        console.error('分类数据上传失败:', error);\n        this.$message.error('分类数据上传失败，请重试');\n      }\n    },\n    handleSizeChange(val) {\n      this.queryParam.limit = val;\n      this.queryCloudDatabase();\n    },\n    handlePageChange(val) {\n      this.queryParam.page = val;\n      this.queryCloudDatabase();\n    },\n    // 提交编辑信息\n    async submitEdit() {\n      try {\n        const accessToken = await this.getAccessToken();\n        const dataToUpdate = {\n          good: this.editForm.good,\n          name: this.editForm.name\n        };\n        await axios.post(`/wechat-api/tcb/databaseupdate?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: `db.collection('categories').doc('${this.editForm._id}').update({ data: ${JSON.stringify(dataToUpdate)} })`\n        });\n        this.$message.success('分类信息编辑成功');\n        this.dialogVisible = false;\n        this.queryCloudDatabase();\n      } catch (error) {\n        console.error('分类信息编辑失败:', error);\n        this.$message.error('分类信息编辑失败，请重试');\n      }\n    },\n    // 编辑分类信息\n    handleEdit(item) {\n      this.editForm = {\n        _id: item._id,\n        good: item.good,\n        name: item.name\n      };\n      this.dialogVisible = true;\n    },\n    // 删除分类信息\n    async handleDelete(id) {\n      try {\n        const accessToken = await this.getAccessToken();\n        await axios.post(`/wechat-api/tcb/databasedelete?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: `db.collection('categories').doc('${id}').remove()`\n        });\n        this.$message.success('分类删除成功');\n        this.queryCloudDatabase();\n      } catch (error) {\n        console.error('分类删除失败:', error);\n        this.$message.error('分类删除失败，请重试');\n      }\n    },\n    // 获取微信访问令牌\n    async getAccessToken() {\n      try {\n        const response = await axios.get('/cgi-bin/token', {\n          params: {\n            grant_type: 'client_credential',\n            appid: CONFIG.appId,\n            secret: CONFIG.appSecret\n          }\n        });\n        return response.data.access_token;\n      } catch (error) {\n        console.error('获取访问令牌失败:', error);\n        throw error;\n      }\n    },\n    // 查询云数据库\n    async queryCloudDatabase() {\n      try {\n        const accessToken = await this.getAccessToken();\n        const query = {\n          env: CONFIG.env,\n          query: `db.collection('categories').skip(${(this.queryParam.page - 1) * this.queryParam.limit}).limit(${this.queryParam.limit}).get()`,\n          totalQuery: \"db.collection('categories').count()\"\n        };\n        const [dataRes, countRes] = await Promise.all([axios.post(`/wechat-api/tcb/databasequery?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: query.query\n        }), axios.post(`/wechat-api/tcb/databasecount?access_token=${accessToken}`, {\n          env: CONFIG.env,\n          query: query.totalQuery\n        })]);\n        const newData = dataRes.data.data ? dataRes.data.data.map(item => JSON.parse(item)) : [];\n        if (JSON.stringify(newData) !== JSON.stringify(this.goodsData)) {\n          this.goodsData = newData;\n          this.total = countRes.data.count;\n        }\n        return dataRes.data;\n      } catch (error) {\n        console.error('查询云数据库失败:', error);\n        throw error;\n      }\n    }\n  },\n  mounted() {\n    // 首次加载数据\n    this.queryCloudDatabase();\n    // 启动定时器（每~秒请求一次）\n    this.timer = setInterval(() => {\n      this.queryCloudDatabase().catch(() => {});\n    }, 10000);\n  },\n  beforeUnmount() {\n    // 组件卸载时清除定时器\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n  }\n};","map":{"version":3,"names":["axios","require","CONFIG","appId","appSecret","env","name","data","methods","handleUpload","accessToken","getAccessToken","dataToUpload","good","queryParam","post","query","JSON","stringify","$message","success","queryCloudDatabase","error","console","handleSizeChange","val","limit","handlePageChange","page","submitEdit","dataToUpdate","editForm","_id","dialogVisible","handleEdit","item","handleDelete","id","response","get","params","grant_type","appid","secret","access_token","totalQuery","dataRes","countRes","Promise","all","newData","map","parse","goodsData","total","count","mounted","timer","setInterval","catch","beforeUnmount","clearInterval"],"sources":["C:\\Users\\Administrator\\Desktop\\小程序后台\\coffeeshop\\src\\components\\set\\lunbotu.vue"],"sourcesContent":["<template>\r\n    <div id=\"container\">\r\n        lunbotu\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nconst axios = require('axios');\r\nconst CONFIG = {\r\n    appId: 'wx6872b1e938e23c07',\r\n    appSecret: 'bb0342f524bf2fe87416defe5797f40a',\r\n    env: 'cloud1-6gzxjy5k59c1f367'\r\n};\r\nexport default {\r\n    name: 'lunBotu',\r\n    data() {\r\n        return {\r\n        };\r\n    },\r\n    methods: {\r\n        // 将数据上传到微信云数据库\r\n        async handleUpload() {\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                const dataToUpload = {\r\n                    good: this.queryParam.good,\r\n                    name: this.queryParam.name\r\n                };\r\n                await axios.post(\r\n                    `/wechat-api/tcb/databaseadd?access_token=${accessToken}`,\r\n                    {\r\n                        env: CONFIG.env,\r\n                        query: `db.collection('categories').add({ data: ${JSON.stringify(dataToUpload)} })`\r\n                    }\r\n                );\r\n                this.$message.success('分类数据上传成功');\r\n                this.queryCloudDatabase();\r\n            } catch (error) {\r\n                console.error('分类数据上传失败:', error);\r\n                this.$message.error('分类数据上传失败，请重试');\r\n            }\r\n        },\r\n\r\n        handleSizeChange(val) {\r\n            this.queryParam.limit = val;\r\n            this.queryCloudDatabase();\r\n        },\r\n\r\n        handlePageChange(val) {\r\n            this.queryParam.page = val;\r\n            this.queryCloudDatabase();\r\n        },\r\n\r\n        // 提交编辑信息\r\n        async submitEdit() {\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                const dataToUpdate = {\r\n                    good: this.editForm.good,\r\n                    name: this.editForm.name\r\n                };\r\n                await axios.post(\r\n                    `/wechat-api/tcb/databaseupdate?access_token=${accessToken}`,\r\n                    {\r\n                        env: CONFIG.env,\r\n                        query: `db.collection('categories').doc('${this.editForm._id}').update({ data: ${JSON.stringify(dataToUpdate)} })`\r\n                    }\r\n                );\r\n                this.$message.success('分类信息编辑成功');\r\n                this.dialogVisible = false;\r\n                this.queryCloudDatabase();\r\n            } catch (error) {\r\n                console.error('分类信息编辑失败:', error);\r\n                this.$message.error('分类信息编辑失败，请重试');\r\n            }\r\n        },\r\n\r\n        // 编辑分类信息\r\n        handleEdit(item) {\r\n            this.editForm = {\r\n                _id: item._id,\r\n                good: item.good,\r\n                name: item.name\r\n            };\r\n            this.dialogVisible = true;\r\n        },\r\n\r\n        // 删除分类信息\r\n        async handleDelete(id) {\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                await axios.post(\r\n                    `/wechat-api/tcb/databasedelete?access_token=${accessToken}`,\r\n                    {\r\n                        env: CONFIG.env,\r\n                        query: `db.collection('categories').doc('${id}').remove()`\r\n                    }\r\n                );\r\n                this.$message.success('分类删除成功');\r\n                this.queryCloudDatabase();\r\n            } catch (error) {\r\n                console.error('分类删除失败:', error);\r\n                this.$message.error('分类删除失败，请重试');\r\n            }\r\n        },\r\n\r\n        // 获取微信访问令牌\r\n        async getAccessToken() {\r\n            try {\r\n                const response = await axios.get('/cgi-bin/token', {\r\n                    params: {\r\n                        grant_type: 'client_credential',\r\n                        appid: CONFIG.appId,\r\n                        secret: CONFIG.appSecret\r\n                    }\r\n                });\r\n                return response.data.access_token;\r\n            } catch (error) {\r\n                console.error('获取访问令牌失败:', error);\r\n                throw error;\r\n            }\r\n        },\r\n\r\n\r\n        // 查询云数据库\r\n        async queryCloudDatabase() {\r\n            try {\r\n                const accessToken = await this.getAccessToken();\r\n                const query = {\r\n                    env: CONFIG.env,\r\n                    query: `db.collection('categories').skip(${(this.queryParam.page - 1) * this.queryParam.limit}).limit(${this.queryParam.limit}).get()`,\r\n                    totalQuery: \"db.collection('categories').count()\"\r\n                };\r\n                const [dataRes, countRes] = await Promise.all([\r\n                    axios.post(`/wechat-api/tcb/databasequery?access_token=${accessToken}`, { env: CONFIG.env, query: query.query }),\r\n                    axios.post(`/wechat-api/tcb/databasecount?access_token=${accessToken}`, { env: CONFIG.env, query: query.totalQuery })\r\n                ]);\r\n                const newData = dataRes.data.data ? dataRes.data.data.map(item => JSON.parse(item)) : [];\r\n                if (JSON.stringify(newData) !== JSON.stringify(this.goodsData)) {\r\n                    this.goodsData = newData;\r\n                    this.total = countRes.data.count;\r\n                }\r\n                return dataRes.data;\r\n            } catch (error) {\r\n                console.error('查询云数据库失败:', error);\r\n                throw error;\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        // 首次加载数据\r\n        this.queryCloudDatabase();\r\n        // 启动定时器（每~秒请求一次）\r\n        this.timer = setInterval(() => {\r\n            this.queryCloudDatabase().catch(() => { });\r\n        }, 10000);\r\n    },\r\n    beforeUnmount() {\r\n        // 组件卸载时清除定时器\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n            this.timer = null;\r\n        }\r\n    }\r\n\r\n}\r\n</script>\r\n<style scoped>\r\ntable {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n}\r\n\r\nth,\r\ntd {\r\n    border: 1px solid #ddd;\r\n    padding: 8px;\r\n    text-align: left;\r\n}\r\n\r\nth {\r\n    background-color: #f2f2f2;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}